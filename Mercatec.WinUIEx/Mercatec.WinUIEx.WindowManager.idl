import "Mercatec.WinUIEx.BackdropType.idl";
import "Mercatec.WinUIEx.LocalSettings.idl";
import "Mercatec.WinUIEx.Messaging.WindowMessageEventArgs.idl";
import "Mercatec.WinUIEx.WindowState.idl";
import "Mercatec.WinUIEx.ZOrderInfo.idl";

namespace Mercatec.WinUIEx
{
    /// <summary>
    ///     Manages Window sizes, persists location and size across application sessions, simplifies backdrop configurations etc.
    ///     Use this class instead of <see cref="WindowEx"/> if you just want to extend an existing window with functionality, without having to change the baseclass.
    /// </summary>
    [default_interface]
    runtimeclass WindowManager 
    {
        /// <summary>
        ///     Gets (or creates) a window manager for the specific window.
        /// </summary>
        /// <param name="Window"></param>
        /// <returns></returns>
        static WindowManager Get(Microsoft.UI.Xaml.Window Window);

        /// <summary>
        ///     Gets a reference to the AppWindow for the app.
        /// </summary>
        Microsoft.UI.Windowing.AppWindow AppWindow { get; };

        /// <summary>
        ///     Gets or sets the width of the window.
        /// </summary>
        /// <value>The window width in device independent pixels.</value>
        /// <seealso cref="MinWidth"/>
        /// <seealso cref="MaxWidth"/>
        Double Width { get; set; };

        /// <summary>
        ///     Gets or sets the height of the window.
        /// </summary>
        /// <value>The window height in device independent pixels.</value>
        /// <seealso cref="MinHeight"/>
        /// <seealso cref="MaxHeight"/>
        Double Height { get; set; };

        /// <summary>
        ///     Gets or sets the minimum width of this window.
        /// </summary>
        /// <value>The minimum window width in device independent pixels.</value>
        /// <remarks>A window is currently set to a minimum of 139 pixels.</remarks>
        /// <seealso cref="MaxWidth"/>
        /// <seealso cref="MinHeight"/>
        Double MinWidth { get; set; };

        /// <summary>
        ///     Gets or sets the minimum height of this window
        /// </summary>
        /// <value>The minimum window height in device independent pixels.</value>
        /// <remarks>A window is currently set to a minimum of 39 pixels.</remarks>
        /// <seealso cref="MaxHeight"/>
        /// <seealso cref="MinWidth"/>
        Double MinHeight { get; set; };

        /// <summary>
        ///     Gets or sets the maximum width of this window
        /// </summary>
        /// <value>The maximum window width in device independent pixels.</value>
        /// <remarks>The default is 0, which means no limit. If the value is less than <see cref="MinWidth"/>, the <c>MinWidth</c> will also be used as the maximum width.</remarks>
        /// <seealso cref="MaxHeight"/>
        /// <seealso cref="MinWidth"/>
        Double MaxWidth { get; set; };

        /// <summary>
        ///     Gets or sets the maximum height of this window
        /// </summary>
        /// <value>The maximum window height in device independent pixels.</value>
        /// <remarks>The default is 0, which means no limit. If the value is less than <see cref="MinHeight"/>, the <c>MinHeight</c> will also be used as the maximum height.</remarks>
        /// <seealso cref="MaxWidth"/>
        /// <seealso cref="MinHeight"/>
        Double MaxHeight { get; set; };

        /// <summary>
        ///     Gets or sets the current window state.
        /// </summary>
        /// <remarks>
        /// <para>When the <see cref="WindowState"/> property is changed, <see cref="StateChanged"/> is raised.</para>
        /// <note>
        ///     This property only has affect when using the OverlappedPresenter.
        /// </note>
        /// </remarks>
        /// <value>A <see cref="WindowState"/> that determines whether a window is restored, minimized, or maximized.
        /// The default is <see cref="WindowState.Normal"/> (restored).</value>
        /// <seealso cref="WindowManager.StateChanged"/>
        /// <seealso cref="PresenterKind"/>
        Mercatec.WinUIEx.WindowState WindowState { get; set; };

        /// <summary>
        ///     Occurs when the window's <see cref="WindowState"/> property changes.
        /// </summary>
        /// <remarks>
        ///     <note>
        ///         This event only has affect when using the OverlappedPresenter.
        ///     </note>
        /// </remarks>
        /// <seealso cref="WindowManager.WindowState"/>
        /// <seealso cref="PresenterChanged"/>
        event Windows.Foundation.TypedEventHandler<WindowManager, Mercatec.WinUIEx.WindowState> StateChanged;

        /// <summary>
        ///     Event raised when a windows message is received.
        /// </summary>
        event Windows.Foundation.TypedEventHandler<WindowManager, Mercatec.WinUIEx.Messaging.WindowMessageEventArgs> WindowMessageReceived;

        /// <remarks>
        ///     The ID must be set before the window activates. The window size and position
        ///     will only be restored if the monitor layout hasn't changed between application settings.
        ///
        ///     The property uses ApplicationData storage, and therefore is currently only functional for
        ///     packaged applications.
        ///
        ///     By default the property uses <see cref="ApplicationData"/> storage, and therefore is currently only functional for
        ///     packaged applications. If you're using an unpackaged application, you must also set the <see cref="PersistenceStorage"/>
        ///     property and manage persisting this across application settings.
        /// </remarks>
        /// <seealso cref="PersistenceStorage"/>
        String PersistenceId { get; set; };

        /// <summary>
        ///     Gets or sets the persistence storage for maintaining window settings across application settings.
        /// </summary>
        /// <remarks>
        ///     For a packaged application, this will be initialized automatically for you, and saved with the application identity using <see cref="ApplicationData"/>.
        ///     However for an unpackaged application, you will need to set this and serialize the property to/from disk between application sessions.
        ///     The provided dictionary is automatically written to when the window closes, and should be initialized before any window with persistence opens.
        /// </remarks>
        /// <seealso cref="PersistenceId"/>
        static LocalSettings PersistenceStorage { get; set; };

        /// <summary>
        ///     Gets or sets a value indicating whether the default title bar is visible or not.
        /// </summary>
        Boolean IsTitleBarVisible { get; set; };

        /// <summary>
        ///     Gets or sets a value indicating whether the minimize button is visible
        /// </summary>
        Boolean IsMinimizable { get; set; };

        /// <summary>
        ///     Gets or sets a value indicating whether the maximimze button is visible
        /// </summary>
        Boolean IsMaximizable { get; set; };

        /// <summary>
        ///     Gets or sets a value indicating whether the window can be resized.
        /// </summary>
        Boolean IsResizable { get; set; };

        /// <summary>
        ///     Gets or sets a value indicating whether this window is always on top.
        /// </summary>
        Boolean IsAlwaysOnTop { get; set; };

        /// <summary>
        ///     Gets or sets the presenter kind for the current window
        /// </summary>
        /// <seealso cref="AppWindow.Presenter"/>
        /// <seealso cref="PresenterChanged"/>
        Microsoft.UI.Windowing.AppWindowPresenterKind PresenterKind{ get; set; };

        /// <summary>
        ///     Raised if the window position changes.
        /// </summary>
        event Windows.Foundation.TypedEventHandler<WindowManager, Windows.Graphics.PointInt32> PositionChanged;

        /// <summary>
        ///     Raised if the presenter for the window changes.
        /// </summary>
        event Windows.Foundation.TypedEventHandler<WindowManager, Microsoft.UI.Windowing.AppWindowPresenter> PresenterChanged;

        /// <summary>
        ///     Raised if the Z order of the window changes.
        /// </summary>
        event Windows.Foundation.TypedEventHandler<WindowManager, Mercatec.WinUIEx.ZOrderInfo> ZOrderChanged;

        /// <summary>
        ///     Gets or sets the system backdrop for the window.
        ///     Note: Windows 10 doesn't support Acrylic, so will fall back to default backdrop.
        /// </summary>
        /// <seealso cref="MicaSystemBackdrop"/>
        /// <seealso cref="AcrylicSystemBackdrop"/>
        Mercatec.WinUIEx.BackdropType BackdropType { get; set; };
    }
}

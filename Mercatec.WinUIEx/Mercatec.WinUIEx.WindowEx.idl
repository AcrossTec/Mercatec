import "Mercatec.WinUIEx.Icon.idl";
import "Mercatec.WinUIEx.BackdropType.idl";
import "Mercatec.WinUIEx.ZOrderInfo.idl";

namespace Mercatec.WinUIEx
{
    /// <summary>
    ///     A custom WinUI Window with more convenience methods
    /// </summary>
    [default_interface]
    [contentproperty("WindowContent")]
    unsealed runtimeclass WindowEx : Microsoft.UI.Xaml.Window
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="WindowEx"/> class.
        /// </summary>
        WindowEx();

        /// <summary>
        ///     Shows a message dialog.
        /// </summary>
        /// <param name="Content">The message displayed to the user.</param>
        /// <param name="Title">The title to display on the dialog, if any.</param>
        /// <returns>An object that represents the asynchronous operation.</returns>
        Windows.Foundation.IAsyncAction ShowMessageDialogAsync(String Content);

        [default_overload]
        Windows.Foundation.IAsyncAction ShowMessageDialogAsync(String Content, String Title);

        /// <summary>
        ///     Shows a message dialog.
        /// </summary>
        /// <param name="Content">The message displayed to the user.</param>
        /// <param name="Commands">an array of commands that appear in the command bar of the message dialog. These commands makes the dialog actionable.</param>
        /// <param name="DefaultCommandIndex">The index of the command you want to use as the default. This is the command that fires by default when users press the ENTER key.</param>
        /// <param name="CancelCommandIndex">The index of the command you want to use as the cancel command. This is the command that fires when users press the ESC key.</param>
        /// <param name="Title">The title to display on the dialog, if any.</param>
        /// <returns>An object that represents the asynchronous operation.</returns>
        Windows.Foundation.IAsyncOperation<Windows.UI.Popups.IUICommand> ShowMessageDialogAsync(String Content, IVector<Windows.UI.Popups.IUICommand> Commands);

        [default_overload]
        Windows.Foundation.IAsyncOperation<Windows.UI.Popups.IUICommand> ShowMessageDialogAsync(String Content, IVector<Windows.UI.Popups.IUICommand> Commands, String Title);
        Windows.Foundation.IAsyncOperation<Windows.UI.Popups.IUICommand> ShowMessageDialogAsync(String Content, IVector<Windows.UI.Popups.IUICommand> Commands, UInt32 DefaultCommandIndex);

        [default_overload]
        Windows.Foundation.IAsyncOperation<Windows.UI.Popups.IUICommand> ShowMessageDialogAsync(String Content, IVector<Windows.UI.Popups.IUICommand> Commands, UInt32 DefaultCommandIndex, String Title);
        Windows.Foundation.IAsyncOperation<Windows.UI.Popups.IUICommand> ShowMessageDialogAsync(String Content, IVector<Windows.UI.Popups.IUICommand> Commands, UInt32 DefaultCommandIndex, UInt32 CancelCommandIndex);
        Windows.Foundation.IAsyncOperation<Windows.UI.Popups.IUICommand> ShowMessageDialogAsync(String Content, IVector<Windows.UI.Popups.IUICommand> Commands, UInt32 DefaultCommandIndex, UInt32 CancelCommandIndex, String Title);

        /*
            Error C2668: ambiguous call to overloaded function Mercatec.Application

            /// <summary>
            ///     Gets a reference to the AppWindow for the app.
            ///     Kept here for binary compatibility.
            /// </summary>
            Microsoft.UI.Windowing.AppWindow AppWindow { get; };
        */

        /// <summary>
        ///     Brings the window to the front.
        /// </summary>
        /// <returns></returns>
        Boolean BringToFront();

        /// <summary>
        ///     Gets or sets the task bar icon.
        /// </summary>
        Icon TaskBarIcon { get; set; };

        /*
            Error C2385: ambiguous access of 'Title' Mercatec.Application

            /// <summary>
            ///     Gets or sets the window title.
            ///     Old Workaround for https://github.com/microsoft/microsoft-ui-xaml/issues/3689.
            ///     Needs to stay for binary compat
            /// </summary>
            String Title { get; set; };
        */

        /// <summary>
        ///     Gets or sets a unique ID used for saving and restoring window size and position across sessions.
        /// </summary>
        /// <remarks>
        ///     The ID must be set before the window activates.
        ///     The window size and position will only be restored if the monitor layout hasn't changed between application settings.
        ///     The property uses ApplicationData storage, and therefore is currently only functional for packaged applications.
        /// </remarks>
        String PersistenceId { get; set; };

        /// <summary>
        ///     Gets or sets the Window content.
        /// </summary>
        /// <value>The window content.</value>
        Object WindowContent { get; set; };

        /// <summary>
        ///     Gets or sets a value indicating whether the default title bar is visible or not.
        /// </summary>
        Boolean IsTitleBarVisible { get; set; };

        /// <summary>
        ///     Gets or sets a value indicating whether the minimize button is visible
        /// </summary>
        Boolean IsMinimizable { get; set; };

        /// <summary>
        ///     Gets or sets a value indicating whether the maximimze button is visible
        /// </summary>
        Boolean IsMaximizable { get; set; };

        /// <summary>
        ///     Gets or sets a value indicating whether the window can be resized.
        /// </summary>
        Boolean IsResizable { get; set; };

        /// <summary>
        ///     Gets or sets a value indicating whether the window is modal or not.
        /// </summary>
        Boolean IsModal { get; set; };

        /// <summary>
        ///     Gets or sets a value indicating whether this window is shown in task switchers.
        /// </summary>
        Boolean IsShownInSwitchers { get; set; };

        /// <summary>
        ///     Gets or sets a value indicating whether this window is always on top.
        /// </summary>
        Boolean IsAlwaysOnTop { get; set; };

        /// <summary>
        ///     Gets the presenter for the current window
        /// </summary>
        /// <seealso cref="PresenterKind"/>
        /// <seealso cref="PresenterChanged"/>
        Microsoft.UI.Windowing.AppWindowPresenter Presenter { get; };

        /// <summary>
        ///     Gets or sets the presenter kind for the current window
        /// </summary>
        /// <seealso cref="Presenter"/>
        /// <seealso cref="PresenterChanged"/>
        Microsoft.UI.Windowing.AppWindowPresenterKind PresenterKind { get; set; };

        /// <summary>
        ///     Gets or sets the width of the window.
        /// </summary>
        Double Width { get; set; };

        /// <summary>
        ///     Gets or sets the height of the window.
        /// </summary>
        Double Height { get; set; };

        /// <summary>
        ///     Gets or sets the minimum width of this window.
        /// </summary>
        /// <value>The minimum window width in device independent pixels.</value>
        /// <remarks>A window is currently set to a minimum of 139 pixels.</remarks>
        /// <seealso cref="MaxWidth"/>
        /// <seealso cref="MinHeight"/>
        Double MinWidth { get; set; };

        /// <summary>
        ///     Gets or sets the minimum height of this window.
        /// </summary>
        /// <value>The minimum window height in device independent pixels.</value>
        /// <remarks>A window is currently set to a minimum of 39 pixels.</remarks>
        /// <seealso cref="MaxHeight"/>
        /// <seealso cref="MinWidth"/>
        Double MinHeight { get; set; };

        /// <summary>
        ///     Gets or sets the maximum width of this window.
        /// </summary>
        /// <value>The maximum window width in device independent pixels.</value>
        /// <remarks>The default is 0, which means no limit. If the value is less than <see cref="MinWidth"/>, the <c>MinWidth</c> will also be used as the maximum width.</remarks>
        /// <seealso cref="MaxHeight"/>
        /// <seealso cref="MinWidth"/>
        Double MaxWidth { get; set; };

        /// <summary>
        ///     Gets or sets the maximum height of this window.
        /// </summary>
        /// <value>The maximum window height in device independent pixels.</value>
        /// <remarks>The default is 0, which means no limit. If the value is less than <see cref="MinHeight"/>, the <c>MinHeight</c> will also be used as the maximum height.</remarks>
        /// <seealso cref="MaxWidth"/>
        /// <seealso cref="MinHeight"/>
        Double MaxHeight { get; set; };

        /// <summary>
        ///     Gets or sets the system backdrop for the window.
        ///     Note: Windows 10 doesn't support these, so will fall back to default backdrop.
        /// </summary>
        /// <seealso cref="MicaSystemBackdrop"/>
        /// <seealso cref="AcrylicSystemBackdrop"/>
        Mercatec.WinUIEx.BackdropType BackdropType { get; set; };

        /// Window events and corresponding virtual methods

        /// <summary>
        ///     Raised if the window position changes.
        /// </summary>
        /// <seealso cref="Microsoft.UI.Windowing.AppWindow.Position"/>
        event Windows.Foundation.EventHandler<Windows.Graphics.PointInt32> PositionChanged;

        /// <summary>
        ///     Called when the window position changed.
        /// </summary>
        /// <param name="position">The current position of the window in screen coordinates.</param>
        /// <seealso cref="Microsoft.UI.Windowing.AppWindow.Position"/>
        protected void OnPositionChanged(ref const Windows.Graphics.PointInt32 Position);

        /// <summary>
        ///     Raised if the presenter for the window changed.
        /// </summary>
        /// <seealso cref="Presenter"/>
        /// <seealso cref="PresenterKind"/>
        event Windows.Foundation.EventHandler<Microsoft.UI.Windowing.AppWindowPresenter> PresenterChanged;

        /// <summary>
        ///     Called when the presenter for the window changed.
        /// </summary>
        /// <param name="newPresenter">The new presenter.</param>
        /// <seealso cref="Presenter"/>
        /// <seealso cref="PresenterKind"/>
        /// <seealso cref="Microsoft.UI.Windowing.AppWindow.Presenter"/>
        protected void OnPresenterChanged(Microsoft.UI.Windowing.AppWindowPresenter NewPresenter);

        /// <summary>
        ///     Raised if the Z order of the window changed.
        /// </summary>
        event Windows.Foundation.EventHandler<ZOrderInfo> ZOrderChanged;

        /// <summary>
        /// Called when the Z order of the window changed.
        /// </summary>
        /// <param name="info">Object describing the current new ZOrder of the window</param>
        protected void OnZOrderChanged(ZOrderInfo Info);

        /// <summary>
        ///     Called when the size of the window changes.
        /// </summary>
        /// <param name="newSize">The new size of the window in device independent units.</param>
        /// <returns>True if the resize event should be marked handled.</returns>
        /// <remarks>
        /// While this event is equivalent to the <see cref="Window.SizeChanged"/> event,
        /// the units provided here are in device independent units and not screen pixels.
        /// </remarks>
        protected Boolean OnSizeChanged(ref const Windows.Foundation.Size NewSize);

        /// <summary>
        ///     Called when the actual theme changes
        /// </summary>
        /// <param name="theme">The new theme</param>
        /// <seealso cref="FrameworkElement.ActualTheme"/>
        /// <seealso cref="ActualTheme"/>
        protected void OnThemeChanged(Microsoft.UI.Xaml.ElementTheme Theme);

        /// <summary>
        ///     The actual theme for the window
        /// </summary>
        /// <seealso cref="OnThemeChanged(ElementTheme)"/>
        Microsoft.UI.Xaml.ElementTheme ActualTheme { get; };

        /// Window events and corresponding virtual methods
    }
}
